/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        if (root == null) return -1;

        ArrayList<Long> level_sum=new ArrayList<>();
        Queue<TreeNode> q=new LinkedList<>();
        
        q.add(root);
        
        while(!q.isEmpty())
        {
            long sum=0;
            int size=q.size();
            for(int i=1;i<=size;i++)
            {
                TreeNode curr=q.remove();
                sum+=curr.val;
                if(curr.left!=null)
                {
                    q.add(curr.left);
                }
                if(curr.right!=null)
                {
                    q.add(curr.right);
                }
            }
            level_sum.add(sum);
            
        }

       
        if(level_sum.size()<k)
        {
            return -1;
        }
        Collections.sort(level_sum, Collections.reverseOrder());

        return level_sum.get(k-1);
        
    }
}
